name: Security (push)

on: [push]

jobs:
  Secrets:
    runs-on: ubuntu-latest
    name: detect-secrets
    steps:
      - uses: actions/checkout@v2
      - name: Setup up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install detect-secrets
        run: | 
          pip install detect-secrets==1.0.3 jq
      - name: Detect secrets
        run: |
          detect-secrets scan --exclude-files package-lock.json > ./detect-secrets.json
      - name: Check results
        run: |
          SECRETS=$(cat ./detect-secrets.json | jq '.results[] | length')
          if ! [ -z $SECRETS ]; then echo "hello"; exit 1; fi
      - name: Backup Report
        uses: actions/upload-artifact@v2
        if: always()
        with:
         name: detect-secrets.json
         path: ./detect-secrets.json

  SAST:
    runs-on: ubuntu-latest
    name: static-analysis
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: install bandit
        run: |
          python -m pip install bandit
      - name: run bandit
        run: |
          bandit -r functions/ -n 3 -f html -o bandit.html
      - name: Backup Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: bandit.html
          path: ./bandit.html

  SCA:
    runs-on: ubuntu-latest
    name: dependency-check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.3' 
      - name: Install pup
        run: |
          go get github.com/ericchiang/pup
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install virtualenv
        run: |
          pip install virtualenv
      - name: Install dependencies
        run: |
          virtualenv venv
          source ./venv/bin/activate .
          pip install -r requirements.txt
      - name: Cache Dependency Check DB
        uses: actions/cache@v2
        with:
          path: ~/.local/dependency-check/
          key: $-depcheck-$
          restore-keys: $-depcheck
      - name: Install dependency-check
        run: |
            pip install dependency-check
      - name: Run dependency-check
        run: |
          dependency-check --enableExperimental -s ./venv -f HTML --suppression .github/workflows/dependency-check-suppression.xml
      - name: Check results
        run: |
          VULN=$(cat ./dependency-check-report.html | pup '#vulnerableCount text{}')
          if [ $VULN -gt 0 ]; then exit 1; fi
      - name: Upload Test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: dependency-check-report.html
          path: ./dependency-check-report.html

  DAST:
    runs-on: ubuntu-latest
    name: dynamic-analysis
    services:
      localstack:
        image: localstack/localstack
        ports:
          - 4566:4566
        env:
          SERVICES: serverless
          DEBUG: ""
          DATA_DIR: ""
          LAMBDA_EXECUTOR: ""
          KINESIS_ERROR_PROBABILITY: ""
          DOCKER_HOST: unix:///var/run/docker.sock
          HOST_TMP_FOLDER: "/tmp"
          HOSTNAME_EXTERNAL: localstack
        options: >-
          --name=localstack
          --health-cmd="curl -sS 127.0.0.1:4566 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3  
    steps:
      - name: localstack health
        run: |
          curl http://localhost:${{ job.services.localstack.ports[4566] }}/health
      - uses: actions/checkout@v2
      - name: Setup Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: install serverless
        run: sudo npm install -g serverless@2.29.0 && npm install
      - name: Deploy to localstack
        run: sls deploy --stage local
      - name: Get deployment URL
        run: | 
          URL=$(sls info --stage local | grep restapis)/ping
          echo "target_url=$URL" >> $GITHUB_ENV
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          target: "${{ env.target_url }}"
          fail_action: true
  UsersWithoutMfa:
    runs-on: ubuntu-latest
    name: check-users-without-mfa
    steps:
    - uses: actions/github-script@v4
      with:
        github-token: ${{secrets.MY_ORG_TOKEN}}
        script: |
          const result = await github.orgs.listMembers({org: "cbrix-dev", filter: "2fa_disabled"});
          if (result['data'].length > 1) {
            result['data'].forEach(function(obj) { 
              console.log(obj['login'] + " does not have MFA enabled"); 
            });
          }
          process.exit((result['data'].length > 1) ? 1 : 0);
